{
	"info": {
		"_postman_id": "e9d08afd-a1eb-44e5-9727-19eaffdf1f22",
		"name": "UserHub API Testing",
		"description": "A beginner-friendly Postman project that tests user registration, login, profile fetch, update, and deletion using Reqres API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46784361"
	},
	"item": [
		{
			"name": "User Actions",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"auth_token\", jsonData.token);\r",
									"pm.environment.set(\"user_id\", jsonData.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"eve.holt@reqres.in\",\r\n    \"password\":\"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should fail to register\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().error).to.include(\"Only defined users\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"oishy@gmail.com\",\r\n    \"password\":\"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"auth_token\", jsonData.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"eve.holt@reqres.in\",\r\n    \"password\":\"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\"\r\n}\r\n//password is missing",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"// Show the name in the Postman Console\r",
									"console.log(\"First name is:\", jsonData.data.first_name);\r",
									"\r",
									"pm.test(\"Response contains a user\", function () {\r",
									"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"email\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid user_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users(Page 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains a user list\", function () {\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Loop through the array and print each user's full name\r",
									"jsonData.data.forEach(function(user, index) {\r",
									"    console.log(`User ${index + 1}: ${user.first_name} ${user.last_name}`);\r",
									"    pm.test(`User ${index + 1} has an email`, function () {\r",
									"    pm.expect(user.email).to.exist;\r",
									"});\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users?page =2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page ",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "color lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a list of colors\", function () {\r",
									"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.data.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// Loop through and print color names\r",
									"jsonData.data.forEach(function(color, index) {\r",
									"    console.log(`Color ${index + 1}: ${color.name} (${color.color})`);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/unknown",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Name and job updated\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Oishy\");\r",
									"    pm.expect(jsonData.job).to.eql(\"Postman API Tester\");\r",
									"});\r",
									"// though it is showing that it has changed user id 5 to Oishy,but as this is a fake server,it is not updated for real,so when you run get all users,it will show the same name before\r",
									"pm.test(\"Response contains updatedAt timestamp\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Oishy\",\r\n  \"job\": \"Postman API Tester\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user partially",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Job is updated\", function () {\r",
									"    pm.expect(jsonData.job).to.eql(\"Only Field Patched\");\r",
									"});\r",
									"\r",
									"pm.test(\"Updated timestamp exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"job\": \"Only Field Patched\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "pm.test(\"Status code is 204\", function () {\r\n    pm.response.to.have.status(204);\r\n});\r\n\r\npm.test(\"Response body is empty\", function () {\r\n    pm.expect(pm.response.text()).to.eql(\"\");\r\n});\r\n"
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "`All API requests related to user management.`\n\n- Register\n    \n- Login\n    \n- Get user\n    \n- Update user\n    \n- Delete user"
		}
	]
}